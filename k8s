Test status endpoint:
Input: Use the job_id from the previous step to check status.
Expectation: Status should be pending or in progress initially, and eventually turn to complete.
Test Cases:
After submitting the job, hit the status endpoint immediately and verify the status is pending.
Continuously check the status until it turns to complete.
Ensure status transitions happen in a reasonable time.
Test report endpoint:
Input: Use the completed job_id to retrieve the report.
Expectation: The API should return a report link and any additional fields.
Test Cases:
Retrieve the report once the job status is complete.
Ensure the report contains the expected fields like vulnerability details, severity, etc.
Check that the report link is valid and accessible.


est fetching report before job completes:
Input: Try to fetch the report before the status is complete.
Expectation: The API should return a meaningful error (e.g., 400 Bad Request or 202 Accepted, indicating the job is still in progress).


Test job timeout:
Input: Test how the system handles jobs that take too long to process or get stuck.
Expectation: The API should return an appropriate status like timeout or failed after a certain duration.


6. Data Validation Tests
Ensure that data returned by the API is consistent and correct.

Test field consistency in status and report endpoints:
Input: Validate that the fields returned by the status and report endpoints follow the API schema.
Expectation: Ensure that no fields are missing, the data is formatted correctly, and contains all the expected information.
Test proper image-to-report mapping:
Input: For each image, validate that the report contains the correct data specific to that image.
Expectation: Ensure thereâ€™s no data mix-up, and each report corresponds to its respective scan.
